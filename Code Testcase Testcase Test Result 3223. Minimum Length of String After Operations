/*You are given a string s.

You can perform the following process on s any number of times:

Choose an index i in the string such that there is at least one character to the left of index i that is equal to s[i], and at least one character to the right that is also equal to s[i].
Delete the closest character to the left of index i that is equal to s[i].
Delete the closest character to the right of index i that is equal to s[i].
Return the minimum length of the final string s that you can achieve.*/

class Solution {
    public int minimumLength(String s) {
        int[] temp = new int[26];//create a frequency  array for string 
        for(int i = 0 ; i < s.length() ; i++){
            char ch = s.charAt(i);
           temp[ch-'a']++;//fill the frequency array for each character in string
            }
        for(int j = 0; j < temp.length ; j++){
             while(temp[j] >= 3){ //reduce the count of frequency to 2 as we need atleast 3 frequency count to perform operations 
                temp[j] -= 2;
             }
        } 
        int sum = 0;//take sum of our updated frequency array
        for(int i = 0 ; i < temp.length ; i++){
            sum += temp[i];//it is the answer of minimum length of string
        }
        return sum ;//return the answer
    }
}
